/**
 * Validates whether a lap looks like a lap or whether it's full of junk.
 * @module validation/lap
 */

const common = require('./common.js');


/**
 * Parses a request with lap data to see whether that data is valid or not.
 * @param {Request} req - A request generated by express router
 * @return {Promise}
 * resolve returns parsed and validated data as a lap.<br>
 * reject if the validation failed somehow.
 */
function parseRequest(req) {
    return parseData(req.body.id,
        req.body.unit,
        req.body.distance,
        req.body.time);
};


/**
 * Parses a request with lap data to see whether that data is valid or not.
 * @param {String} id - An id for this lap
 * @param {String} unit - The measurement used for this lap
 * @param {String} distance - The distance covered in this lap
 * @param {String} time - The time taken to covere this lap
 * @return {Promise}
 * resolve returns parsed and validated data as a lap.<br>
 * reject if the validation failed somehow.
 */
function parseData(id, unit, distance, time) {
    return new Promise((resolve, reject) => {
        if (isValid(id, unit, distance, time)) {
            let payload = {
                id: id,
                unit: unit,
                distance: distance,
                time: time,
            };
            resolve(payload);
        } else {
            reject('bad');
        }
    });
};


function isValid(id, unit, distance, time) {
    return (isValidDistance(distance) &&
        isValidTime24(time));
};


function isValidDistance(dist) {
    return (typeof(dist) != 'undefined' &&
        common.isFloatExpr(dist) &&
        dist > 0);
};


function isValidTime24(time) {
    return (typeof(time) != 'undefined' &&
        common.isTimeExpr24(time));
};


module.exports = {
    parseRequest: parseRequest,
    parseData: parseData,
};
