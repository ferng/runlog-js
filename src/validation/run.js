/**
 * Validates whether a lap looks like a lap or whether it's full of junk.
 * @module src/validation/run
 */

const common = require('./common.js');
const log = require('../utils/logger.js').getLogger();


/**
 * Parses a request with lap data to see whether that data is valid or not.
 * @param {Request} req - A request generated by express router
 * @return {Promise}
 * resolve returns parsed and validated data as a {@link module:public/types~lap|lap}.<br>
 * reject if the validation failed somehow.
 */
function parseRequest(req) {
    const dataType = req.path.slice(1);
    switch (dataType) {
        case 'laps':
            return parseLapData(req.body.id,
                req.body.unit,
                req.body.distance,
                req.body.time);
        default:
            return null;
    }
};


/**
 * Parses a request with lap data to see whether that data is valid or not.
 * @param {string} id - An id for this lap
 * @param {string} unit - The measurement used for this lap
 * @param {string} distance - The distance covered in this lap
 * @param {string} time - The time taken to covere this lap
 * @return {Promise}
 * resolve returns parsed and validated data as a {@link module:public/types~lap|lap}.<br>
 * reject if the validation failed somehow.
 */
function parseLapData(id, unit, distance, time) {
    log.debug('Parsing lap id:[%s] unit:[%s] distance:[%s] time:[%s]', id, unit, distance, time);
    return new Promise((resolve, reject) => {
        if (isValid(id, unit, distance, time)) {
            let payload = {
                id: id,
                unit: unit,
                distance: distance,
                time: time,
            };
            resolve(payload);
        } else {
            reject('bad');
        }
    });
};


function isValid(id, unit, distance, time) {
    return (isValidDistance(distance) &&
        isValidTime24(time));
};


function isValidDistance(dist) {
    return (typeof (dist) != 'undefined' &&
        common.isFloatExpr(dist) &&
        dist > 0);
};


function isValidTime24(time) {
    return (typeof (time) != 'undefined' &&
        common.isTimeExpr24(time));
};


module.exports = {
    parseRequest: parseRequest,
    parseLapData: parseLapData,
};
